<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>de.metas.parent.general</artifactId>
		<groupId>de.metas</groupId>
		<version>3-development-SNAPSHOT</version>
	</parent>

	<artifactId>de.metas.parent</artifactId>
	
	<!-- FRESH-271: we need an explicit version here, otherwise versions-maven-plugin can't set it to another version it -->
	<version>3-development-SNAPSHOT</version>

	<packaging>pom</packaging>

	<description>metasfresh parent pom with common settings (e.g. java file encoding, enforcer rules, depdendency management) to be used by all metasfreseh maven projects</description>

	<!-- TODO: consider removing jasperreports.version and dependencyManagement 
		from this pom. It will instead be handled by adempiereJasper-parent -->

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<adempiere.java.version>1.7</adempiere.java.version>
		<servicemix.java.version>1.7</servicemix.java.version>

		<!-- right now 6.2.2 is the latest, but there we suffer from http://community.jaspersoft.com/jasperreports-library/issues/7521 -->
		<jasperreports.version>6.2.1</jasperreports.version>
				
		<!-- FRESH-397: jasper 6.2.2 uses itext, poi and zxing with theses versions -->
		<itext.version>2.1.7.js5</itext.version>
		<poi.version>3.12</poi.version>
		<zxing.version>2.3.0</zxing.version>
		
		<!-- this also happens to be the activeMQ.version used by http://servicemix.apache.org/downloads/servicemix-6.1.0 -->
		<activeMQ.version>5.12.1</activeMQ.version>

		<spring-boot.version>1.3.3.RELEASE</spring-boot.version>

		<!-- this is the spring version from the dependency tree of spring-boot-1.3.3
		Note that we need spring in de.metas.report.jasper.client and ...jasper.server.base for some reason.	-->
		<spring.version>4.2.5.RELEASE</spring.version>

		<guava.version>18.0</guava.version>

		<!-- 
		The version to be used by metasfresh, as opposed to the ESB's. 
		The two versions might clash in ait modules 
		-->
		<metasfresh.cxf.version>3.1.6</metasfresh.cxf.version>

		<!-- Tells SonarQube to run the unit tests -->
		<sonar.dynamicAnalysis>true</sonar.dynamicAnalysis>
    	<!-- Tells SonarQube to use JaCoCo (formerly EclEmma) as our unit test coverage tool -->
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>

		<license.name>gpl_v2</license.name>

		<acceptance.reports.dir>target/acceptance-reports</acceptance.reports.dir>

	</properties>

	<!-- 
		FRESH-271
		by declaring those two reactor poms as modules of this parent pom, we can set all the versions from cmdline, using 
		mvn org.codehaus.mojo:versions-maven-plugin:2.1:revert -DnewVersion=tst -f de.metas.parent\pom.xml
		Note that we use version 2.1 because of http://stackoverflow.com/questions/29995139/maven-versions-maven-plugin-versions-plugin-2-2
	-->
	<modules>
		<module>../de.metas.reactor</module>
		<module>../de.metas.reactor.ait</module>
		<module>../de.metas.esb</module>
	</modules>

	<dependencyManagement>
		<dependencies>
			<!-- Import dependency management from Spring Boot -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>net.sf.jasperreports</groupId>
				<artifactId>jasperreports</artifactId>
				<version>${jasperreports.version}</version>
			</dependency>

			<dependency>
				<groupId>com.lowagie</groupId>
				<artifactId>itext</artifactId>
				<version>${itext.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi</artifactId>
				<version>${poi.version}</version>
			</dependency>
			<dependency>
				<groupId>com.google.zxing</groupId>
				<artifactId>core</artifactId>
				<version>${zxing.version}</version>
			</dependency>
			<dependency>
				<groupId>com.google.zxing</groupId>
				<artifactId>javase</artifactId>
				<version>${zxing.version}</version>
			</dependency>
		
			<!-- these two are dependencies of jasperreports 4.6.0, 
				 and they don't converge to consistent versions within the jasperreport-4.6.0 dependency tree  -->
				 <!--  
			<dependency>
				<groupId>xml-apis</groupId>
				<artifactId>xml-apis</artifactId>
				<version>1.3.04</version>
			</dependency>
			<dependency>
				<groupId>commons-beanutils</groupId>
				<artifactId>commons-beanutils</artifactId>
				<version>1.8.3</version>
			</dependency>
-->

			<dependency>
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>1.6</version>
			</dependency>


			<!-- jasperreports 6.2.2 has version 2.1.4 of jackson in its tree, but we prefer this later version -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>2.6.5</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>2.6.5</version>
			</dependency>
			
			<!-- jasperreport-4.6.0 has version 1.9.4 of jackson-mapper-asl and jackson-core-asl in its tree, but we prefer the later version
			-->
			<!-- 
			<dependency>
				<groupId>org.codehaus.jackson</groupId>
				<artifactId>jackson-mapper-asl</artifactId>
				<version>1.9.10</version>
			</dependency>
			<dependency>
				<groupId>org.codehaus.jackson</groupId>
				<artifactId>jackson-core-asl</artifactId>
				<version>1.9.10</version>
			</dependency>
-->
			<!-- IMPORTANT: when using these dependencies, declared jmockit and hamcrest before junit !-->
			<!--  Use 1.9 (not 1.10) to avoid the following error when running jmokit with EclEmma:
				java.lang.LinkageError: loader (instance of  sun/misc/Launcher$AppClassLoader): attempted  duplicate class definition for name: "...Test$1"
			 -->
			<dependency>
				<groupId>org.jmockit</groupId>
				<artifactId>jmockit</artifactId>
				<version>1.20</version>
			</dependency>

			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-core</artifactId>
				<version>${activeMQ.version}</version>
			</dependency>
			<!-- note: you probably don't want to use active-mq all, because it's likely that the enforcer plugin will fail with it. 
			The reason is that it also includes 3rd-party classes which we already include otherwise.
			 -->
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-all</artifactId>
				<version>${activeMQ.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-broker</artifactId>
				<version>${activeMQ.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-client</artifactId>
				<version>${activeMQ.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-kahadb-store</artifactId>
				<version>${activeMQ.version}</version>
			</dependency>

			<dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>1.1.1</version>
			</dependency>

			<!-- Thx for the two fonts to http://ansuz.sooke.bc.ca/page/fonts ^^ -->
			<dependency>
				<groupId>jp.osdn.ocra</groupId>
				<artifactId>jp.osdn.ocra</artifactId>
				<version>0.2</version>
			</dependency>
			<dependency>
				<groupId>jp.osdn.ocrb</groupId>
				<artifactId>jp.osdn.ocrb</artifactId>
				<version>0.2.1</version>
			</dependency>

			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>3.1.0</version>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>
				<version>1.2</version>
			</dependency>

			<dependency>
				<groupId>javax.mail</groupId>
				<artifactId>mail</artifactId>
				<!-- Version 1.4.1 would also be available as OSGI bundle for servicemix, see http://repo1.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.javax.mail -->
				<version>1.4.3</version>
			</dependency>

			<!-- Concordion for acceptance testing-->
			<dependency>
				<groupId>org.concordion</groupId>
				<artifactId>concordion</artifactId>
				<version>1.5.1</version>
			</dependency>

			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>

			<!--
			Using dependency management is a workaround for:
			[WARNING] Rule 0: org.apache.maven.plugins.enforcer.BanDuplicateClasses failed with message:  
			Duplicate classes found:
		
			  Found in:
			    de.metas.swat:de.metas.swat.swingui:jar:3-development-SNAPSHOT:compile
			    de.metas.swat:de.metas.swat.swingui:jar:3-development-SNAPSHOT:compile
			Notes:
			*an alternative would be to explicitly ignore the artifacts' classes, 
			 but i don't see the pattern of when just an another artifact is flagged as duplicate of itself, 
			 so we would enventually end up ignoring all our own artifacts
			*that this is required might or might not be a bug in banDuplicateClasses, but at least, 
			 i don't yet see the point..maybe it's just using so many SNAPSHOT dependencies is not a common case, 
			 or maybe we are misregarding other best practices..
		    -->
<!--
			<dependency>
				<artifactId></artifactId>
				<groupId></groupId>
				<version>${project.version}</version>
			</dependency>
-->
			<dependency>
				<groupId>de.metas.adempiere.libero</groupId>
				<artifactId>de.metas.adempiere.libero.libero</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>de.metas.adempiere.libero</groupId>
				<artifactId>de.metas.adempiere.libero.libero</artifactId>
				<version>${project.version}</version>
				<classifier>tests</classifier>
			</dependency>
			<dependency>
				<artifactId>de.metas.async</artifactId>
				<groupId>de.metas.async</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>de.metas.business</groupId>
				<artifactId>de.metas.business</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>de.metas.banking</groupId>
				<artifactId>de.metas.banking.base</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>de.metas.banking</groupId>
				<artifactId>de.metas.banking.swingui</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>de.metas.business</groupId>
				<artifactId>de.metas.business</artifactId>
				<classifier>tests</classifier>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.contracts</artifactId>
				<groupId>de.metas.contracts</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.commission.client</artifactId>
				<groupId>de.metas.commission</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.dimension</artifactId>
				<groupId>de.metas.dimension</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.document.archive.base</artifactId>
				<groupId>de.metas.document.archive</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>de.metas.document.archive</groupId>
				<artifactId>de.metas.document.archive.base</artifactId>
				<classifier>tests</classifier>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>de.metas.document.archive</groupId>
				<artifactId>de.metas.document.archive.api</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.document.refid</artifactId>
				<groupId>de.metas.document</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.handlingunits.base</artifactId>
				<groupId>de.metas.handlingunits</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>de.metas.handlingunits</groupId>
				<artifactId>de.metas.handlingunits.base</artifactId>
				<classifier>tests</classifier>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>de.metas.jax.rs</groupId>
				<artifactId>de.metas.jax.rs</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.materialtracking</artifactId>
				<groupId>de.metas.materialtracking</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.materialtracking</artifactId>
				<groupId>de.metas.materialtracking</groupId>
				<classifier>tests</classifier>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.monitoring</artifactId>
				<groupId>de.metas.monitoring</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.payment.esr</artifactId>
				<groupId>de.metas.payment.esr</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.printing.base</artifactId>
				<groupId>de.metas.printing</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.printing.base</artifactId>
				<groupId>de.metas.printing</groupId>
				<classifier>tests</classifier>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<artifactId>de.metas.printing.api</artifactId>
				<groupId>de.metas.printing</groupId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>de.metas.swat</groupId>
				<artifactId>de.metas.swat.ait</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<artifactId>de.metas.swat.base</artifactId>
				<groupId>de.metas.swat</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.swat.base</artifactId>
				<groupId>de.metas.swat</groupId>
				<version>${project.version}</version>
				<classifier>tests</classifier>
			</dependency>

			<dependency>
				<groupId>de.metas.storage</groupId>
				<artifactId>de.metas.storage</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>de.metas.adempiere.ait</groupId>
				<artifactId>de.metas.adempiere.ait</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<artifactId>de.metas.adempiere.adempiere.base</artifactId>
				<groupId>de.metas.adempiere.adempiere</groupId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<artifactId>de.metas.adempiere.adempiere.base</artifactId>
				<groupId>de.metas.adempiere.adempiere</groupId>
				<classifier>tests</classifier>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.adempiere.adempiere.client</artifactId>
				<groupId>de.metas.adempiere.adempiere</groupId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<artifactId>de.metas.adempiere.adempiere.serverRoot.base</artifactId>
				<groupId>de.metas.adempiere.adempiere</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<artifactId>de.metas.adempiere.adempiere.jbossfacet</artifactId>
				<groupId>de.metas.adempiere.adempiere</groupId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>de.metas.acct</groupId>
				<artifactId>de.metas.acct.base</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<artifactId>de.metas.util</artifactId>
				<groupId>de.metas.util</groupId>
				<version>${project.version}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>

		<dependency>
			<groupId>org.jmockit</groupId>
			<artifactId>jmockit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.3.2</version>
					<configuration>
						<encoding>${project.build.sourceEncoding}</encoding>
						<!-- using the adempiere default here, because we have way more adempiere projects than servicemix projects -->
						<source>${adempiere.java.version}</source>
						<target>${adempiere.java.version}</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.7</version>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.1.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.3.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.10</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.4</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>1.8</version>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>jaxb2-maven-plugin</artifactId>
					<version>1.6</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>2.4.1</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.7</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.3.1</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-reactor-plugin</artifactId>
					<version>1.1</version>
				</plugin>

				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-bundle-plugin</artifactId>
					<version>2.5.4</version>
				</plugin>

				<plugin>
					<!-- we need a version that supports encrypted passwords in the settings.xml -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jarsigner-plugin</artifactId>
					<version>1.3.2</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<!-- note: with 1.4.1 we had this problem:
					https://issues.apache.org/jira/browse/MASSEMBLY-659
					https://issues.apache.org/jira/browse/MENFORCER-156
					... solved in 1.3.1 but aparently came back in 1.4.1 ...
					
					Concretely, we got errors like:
					[...]
					00:00:34.798 [INFO] Adding ignorable dependency: null:jmockit:null
					00:00:34.799 [INFO]   Adding ignore: org.junit.runner.Runner
					00:00:34.800 [WARNING] Could not find junit:junit:jar:4.11:test at null
					00:00:34.801 [WARNING] Could not find de.metas.migration:de.metas.migration.cli:jar:3-development-SNAPSHOT:compile at null
					00:00:34.802 [WARNING] Could not find org.hamcrest:hamcrest-all:jar:1.3:test at null
					00:00:34.803 [WARNING] Could not find org.jmockit:jmockit:jar:1.20:test at null
					-->
					<version>1.3.1</version>
					<dependencies>
						<!-- needed for banDuplicateClasses -->
						<dependency>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>extra-enforcer-rules</artifactId>
							<version>1.0-beta-4</version>
						</dependency>
					</dependencies>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>2.4.2</version>
				</plugin>

				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											jasperreports-maven-plugin
										</artifactId>
										<versionRange>
											[1.0-beta-2,)
										</versionRange>
										<goals>
											<goal>compile-reports</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.4,)
										</versionRange>
										<goals>
											<goal>
												unpack-dependencies
											</goal>
											<goal>unpack</goal>
											<goal>
												copy-dependencies
											</goal>
											<goal>copy</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>license-maven-plugin</artifactId>
										<versionRange>[1.8,)</versionRange>
										<goals>
											<goal>update-file-header</goal>
											<goal>update-project-license</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-plugin-plugin</artifactId>
										<versionRange>[3.4,)</versionRange>
										<goals>
											<goal>descriptor</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<extensions>
			<extension>
				<!-- Enabling the use of external ssh commands to deliver artifacts to 
					our repo. We are using putty, which means that authentification is done by 
					pageant :-) -->
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-ssh-external</artifactId>
				<version>1.0-beta-6</version>
			</extension>
		</extensions>

		<plugins>
			<!-- add the gpl-2 license header to our source files.
			Note that the source files in java-legacy were not (entirely) created/edited by us and already have their own license header with which we don't want to tamper.
			-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<id>update-file-header</id>
						<goals>
							<goal>update-file-header</goal>
						</goals>
						<!-- don't upodate the file haeders. it created too much unwanted changes-->
						<!-- phase>process-sources</phase -->
						<configuration>
							<licenseName>${license.name}</licenseName>
							<roots>
								<root>src/main/java</root>
								<root>src/test</root>
							</roots>
							<excludes>
								<!-- the license header might be placed right into the preexisting package-info-javadoc and introdcue a compiler syntax error, so we exclude this -->
								<exclude>**/package-info.java</exclude>
								<!-- our only json files are test samples; we don't need to license them, but the license header would cause trouble reading/parsing the json files. that's why we exclude them -->
								<exclude>**/*.json</exclude>
								<!-- with xml it's similar as it is with json -->
								<exclude>**/*.xml</exclude>
							</excludes>
						</configuration>
					</execution>
					<execution>
						<id>update-project-license</id>
						<goals>
							<goal>update-project-license</goal>
						</goals>
						<phase>process-sources</phase>
						<configuration>
							<licenseName>${license.name}</licenseName>
							<outputDirectory>${project.build.directory}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- We always want to attach the sources -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-sources</id>
						<phase>verify</phase>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Add the generic info plus ci build info to the manifests of all jars 
				that we create -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
						<manifestEntries>
							<ciBuildNo>${BUILD_NUMBER}</ciBuildNo>
							<ciBuildTag>${BUILD_TAG}</ciBuildTag>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			
			<!-- Don't archive a web project's files (i.e. put the classes into WEB-INF/classes), because we want skinny war to include theirs own classes in that folder (and their WEB-INF/lib to be empty) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archiveClasses>false</archiveClasses>
					<attachClasses>true</attachClasses>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<systemPropertyVariables>
						<concordion.output.dir>${acceptance.reports.dir}</concordion.output.dir>
					</systemPropertyVariables>
					<includes>
						<!-- default inclusions, see http://maven.apache.org/surefire/maven-surefire-plugin/examples/inclusion-exclusion.html -->
						<include>**/Test*.java</include>
						<include>**/*Test.java</include>
						<include>**/*TestCase.java</include>
						
						<!-- additional include, because we often use that pattern -->
						<include>**/*Tests.java</include>
					</includes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<configuration>
					<rules>

						<!-- task 08834: We shall not leave the decision about plugin-versions to maven.
									Rationale: we had the case that a build stopped working at a *very* critical moment, 
									because maven picked a more recent version of the jaxb plugin. 
									That version didn't support the way, we configured it and failed with an error message.
									This shall not happen again.
						-->
						<requirePluginVersions>
							<message>!! We need to have the plugin version under control to avoid build failures due to maven releasing a new plugin version !!</message>
							<banLatest>true</banLatest>
							<banRelease>true</banRelease>
							<banSnapshots>true</banSnapshots>
							<phases>clean,deploy,site</phases>
							<additionalPlugins>
								<additionalPlugin>org.apache.maven.plugins:maven-reactor-plugin</additionalPlugin>
							</additionalPlugins>
							<unCheckedPluginList>org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-eclipse-plugin</unCheckedPluginList>
						</requirePluginVersions>

						<!-- See http://maven.apache.org/enforcer/enforcer-rules/dependencyConvergence.html -->
						<dependencyConvergence />

						<banDuplicateClasses>
							<ignoreClasses>
																		
								<!-- itext-2.1.7 has two different versions as dependences -->
								<ignoreClass>org.bouncycastle.*</ignoreClass>

										<!-- org.jboss.client:jbossall-client and partially geronimo specs-->
								<ignoreClass>javax.annotation.*</ignoreClass>
								<ignoreClass>javax.ejb.*</ignoreClass>
								<ignoreClass>javax.jms.*</ignoreClass>
								<ignoreClass>javax.management.j2ee.*</ignoreClass>
								<ignoreClass>javax.xml.*</ignoreClass>
								<ignoreClass>javax.transaction.*</ignoreClass>

								<ignoreClass>org.apache.*</ignoreClass>
								<ignoreClass>org.codehaus.*</ignoreClass>
								<ignoreClass>hidden.org.codehaus.*</ignoreClass>
								<ignoreClass>org.junit.*</ignoreClass>
								<ignoreClass>org.w3c.*</ignoreClass>
								<ignoreClass>org.xml.*</ignoreClass>
										
										<!-- this class originates from org.zkoss.calendar:calendar:jar:1.0.0-RC -->
								<ignoreClass>org.zkoss.calendar.render.CalendarsDefault</ignoreClass>
		
										<!-- the following are camel/servicemix related dependencies -->
										<!--
										Found in, both are dependencies of mylin-smooks-all
										  org.ow2.bundles:ow2-bundles-externals-opencsv:jar:1.0.23:compile
										  net.sf.opencsv:opencsv:jar:2.1:compile
										-->
								<ignoreClass>au.com.bytecode.*</ignoreClass>

								<ignoreClass>com.microsoft.schemas.*</ignoreClass>
								<ignoreClass>org.etsi.uri.*</ignoreClass>
								<ignoreClass>org.openxmlformats.schemas.*</ignoreClass>
								<ignoreClass>org.w3.x2000.*</ignoreClass>
										
										<!--
										Found in:
										  xmlpull:xmlpull:jar:1.1.3.1:compile
										  xpp3:xpp3_min:jar:1.1.4c:compile
										-->
								<ignoreClass>org.xmlpull.*</ignoreClass>
										
										<!--
										Found in:
										  org.apache.xmlbeans:xmlbeans:jar:2.3.0:compile
										  org.apache.servicemix.bundles:org.apache.servicemix.bundles.poi:jar:3.12_1:compile
										-->
								<ignoreClass>schemaorg_apache_xmlbeans.system.*</ignoreClass>
								<ignoreClass>repackage.Repackager</ignoreClass>
								<ignoreClass>repackage.Repackage</ignoreClass>
								<ignoreClass>repackage.EditBuildScript</ignoreClass>

								<!--
								Found in:
								  org.apache.tomcat.embed:tomcat-embed-core:jar:8.0.30:compile
								  javax.servlet:javax.servlet-api:jar:3.1.0:provided
    							 -->
								<ignoreClass>javax.servlet.*</ignoreClass>
							</ignoreClasses>

							<dependencies>
										<!-- See https://groups.google.com/forum/#!topic/jmockit-users/nwNw-la_FAM ("JUnit classes in JMockit jar") for background info
										-->
								<dependency>
									<artifactId>jmockit</artifactId>
									<ignoreClasses>
										<ignoreClass>org.junit.runner.Runner</ignoreClass>
									</ignoreClasses>
								</dependency>

							</dependencies>

							<findAllDuplicates>true</findAllDuplicates>
						</banDuplicateClasses>
					</rules>
					<fail>true</fail>
				</configuration>

				<executions>
					<execution>
						<id>enforce</id>
						<goals>
							<goal>enforce</goal>
						</goals>

					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- If there is sql directory, this profile will activate and zip up 
				the migration SQL files in that directory. Note the property "migration-sql-basedir" 
				needs to be defined in that case -->
			<id>postgres</id>
			<activation>
				<file>
					<exists>src/main/sql/postgresql/system</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>de.metas.assemblies</groupId>
								<artifactId>de.metas.assemblies</artifactId>
								<version>${metasfresh-dependency.version}</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>make-postgresql-assembly</id> <!-- this is used for inheritance merges -->
								<phase>package</phase> <!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>migration_postgresql_system</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- If there is a jasper soruces directory, this profile will activate 
				 It will compile those jrxml files and then assemble the jasper files into a jar.
				 It will *NOT* add src/main/jasperreports as additional source folder, (that's done by the "jasper-source-folder" profile)
			-->
			<id>jasper-build</id>

			<activation>
				<file>
					<exists>src/main/jasperreports</exists>
				</file>
			</activation>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>2.6</version>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
						            <!-- same as jasperreports-maven-plugin's outputDirectory -->
									<outputDirectory>${project.build.directory}/jasper</outputDirectory>
									<resources>
										<resource>
											<directory>src/main/jasperreports</directory>
											<excludes>
												<exclude>**/*.jrxml</exclude> <!-- jrxmls are compiled into jasper files, they don't need to be copied -->
											</excludes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>jasperreports-maven-plugin</artifactId>
						<version>1.0-beta-2</version>
						<configuration>
							<outputDirectory>${project.build.directory}/jasper</outputDirectory>
						</configuration>

						<dependencies>
							<dependency>
								<groupId>org.codehaus.mojo</groupId>
								<artifactId>jasperreports-maven-plugin</artifactId>
								<version>1.0-beta-2</version>
								<!-- note that excluding jasperreports:jasperreports version 1.2 doesn't work even if we don't need it, 
								see http://stackoverflow.com/questions/34193602/how-to-exclude-jasperreports-artifact-from-jasperreports-maven-plugin/34198348 -->
							</dependency>
							<dependency>
								<groupId>net.sf.jasperreports</groupId>
								<artifactId>jasperreports</artifactId>
								<version>${jasperreports.version}</version>
							</dependency>
							
							<!-- http://stackoverflow.com/questions/34193602/how-to-exclude-jasperreports-artifact-from-jasperreports-maven-plugin/34198348#34198348 -->
							<dependency>
								<groupId>commons-collections</groupId>
								<artifactId>commons-collections</artifactId>
								<version>3.2.1</version>
							</dependency>

							<!-- required to support groovy expressions in jrxml files -->
							<dependency>
								<groupId>org.codehaus.groovy</groupId>
								<artifactId>groovy-all</artifactId>
								<version>1.6.5</version>
							</dependency>

							<!-- required to compile reports with barcodes -->
							<dependency>
								<groupId>net.sf.barcode4j</groupId>
								<artifactId>barcode4j-fop-ext-complete</artifactId>
								<version>2.0</version>
								<type>jar</type>
								<scope>compile</scope>
							</dependency>

							<!-- Should fix this error: Execution default of goal org.codehaus.mojo:jasperreports-maven-plugin:1.0-beta-2:compile-reports 
								failed: A required class was missing while executing org.codehaus.mojo:jasperreports-maven-plugin:1.0-beta-2:compile-reports: 
								org/apache/log4j/Layout -->
							<dependency>
								<groupId>log4j</groupId>
								<artifactId>log4j</artifactId>
								<version>1.2.14</version>
							</dependency>
							
							<!-- 
								Adding spring-core and spring-beans to fix "java.lang.NoClassDefFoundError: org/springframework/core/io/Resource"
								when running the jrc
								-->
							<dependency>
								<groupId>org.springframework</groupId>
								<artifactId>spring-core</artifactId>
								<version>3.0.6.RELEASE</version>
							</dependency>
							<dependency>
								<groupId>org.springframework</groupId>
								<artifactId>spring-beans</artifactId>
								<version>3.0.6.RELEASE</version>
							</dependency>

						</dependencies>
						<executions>
							<execution>
								<goals>
									<goal>compile-reports</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>de.metas.assemblies</groupId>
								<artifactId>de.metas.assemblies</artifactId>
								<version>${metasfresh-dependency.version}</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>make-jasper-assembly</id> <!-- this is used for inheritance merges -->
								<phase>package</phase> <!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>jasper</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
							<execution>
								<id>make-jasper-sources-assembly</id> <!-- this is used for inheritance merges -->
								<phase>package</phase> <!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>jasper_sources</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Adds src/main/jasperreports as additional source folder (if the directory is present) 
			this is only intended to be active when running in eclipse, and not for *any* actual maven build.
			we don't want the jasper-stuff to end up in a "regular" artifact jar!
			Particularly the properties files need to be overridden in certain situations, 
			so we can't afford to have an additional copy in the classpath via regular jars

			Hint: 
			in eclipse, you can activate this profile in the projects where you need it, by opening the projects properties (=>maven).
			But, then you can't build a proper artifact using eclipse-maven
			-->
			<id>jasper-source-folder</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-resource</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>add-resource</goal>
								</goals>
								<configuration>
									<resources>
										<resource>
											<directory>src/main/jasperreports</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
<!-- 
	If there is a "webapp" directory, this profile will activate 
	and put the content into a zip file 
-->
		<profile>
			<id>webapp-dir</id>
			<activation>
				<file>
					<exists>src/main/webapp</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>de.metas.assemblies</groupId>
								<artifactId>de.metas.assemblies</artifactId>
								<version>${metasfresh-dependency.version}</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>make-webapp-dir-assembly</id> <!-- this is used for inheritance merges -->
								<phase>package</phase> <!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>webapp_dir</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
		<!-- If there is a maven java-gen sources directory, this profile will activate 
			and add the directory as another sources directory -->
			<id>add-source-java-gen</id>
			<activation>
				<file>
					<exists>src/main/java-gen</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
				<!-- Adds src/main/java-gen as additional source folder (if the directory 
					is present) -->
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-source-java-gen</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>src/main/java-gen</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
		<!-- If there is a maven java-legacy sources directory, this profile will activate 
			and add the directory as another sources directory -->
			<id>add-source-java-legacy</id>
			<activation>
				<file>
					<exists>src/main/java-legacy</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
				<!-- Adds src/main/java-gen as additional source folder (if the directory 
					is present) -->
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-source-java-legacy</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>src/main/java-legacy</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
		<!-- 
			If the file KEYSTORE_REQUIRED.txt is present in a child project, then we assume that some code needs to be signed.
			Therefore, the parent-pom profile with id "prepare-code-signing" activates to download our keystores, 
			unpack them into the "${project.build.directory}/keystore" folder
			and set properties so that e.g. the printing client applet can be singned with our "developement" signature.
			Note that:
				*these default properties can be overridden from outside.
				*our "development" signature is not verified by a CA and is therefore not meant to be rolled out at the customer.
				*the actual signing does not take place in this profile, because different projects will sign different files 
				 (and might even use the keystore with different plugins).
		  -->
			<id>prepare-code-signing</id>
			<activation>
				<file>
					<exists>KEYSTORE_REQUIRED.txt</exists>
				</file>
			</activation>
			<properties>
				<!-- This is the developement keystore and its passwords. 
				They are supposed to make sure that a build on a local dev workstatation won't fail.
				To sign a "real" build for production, they need to be overwritten from outside (=>handled by jenkins and/or the RM).
				-->
				<keystore.version>1.4.0_dev</keystore.version>
				<keystore.alias>metas_dev</keystore.alias>
				<keystore.store.password>metas_dev</keystore.store.password>
				<keystore.key.password>metas_dev</keystore.key.password>

				<keystore.file>metas_development_keystore</keystore.file>
				<keystore.path>${project.build.directory}/keystore/${keystore.file}</keystore.path>
			</properties>
			<build>
				<plugins>
					<plugin>
						<!-- get our keystores and unpack them to the target folder -->
						<!-- thx to http://maksim.sorokin.dk/it/2010/08/19/signing-jars-on-a-build-server/ -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack</id>
								<!-- choosing an early phase to make sure the keystore files are there on prepare-package -->
								<phase>initialize</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>de.metas.keystore</groupId>
											<artifactId>de.metas.keystore</artifactId>
											<version>${keystore.version}</version>
											<type>zip</type>
											<outputDirectory>${project.build.directory}/keystore</outputDirectory>
											<includes>*</includes>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- 
			If the environment variable BUILD_NUMBER is not set, it means that we are not building on jenkins, so we substitute the value "LOCAL-BUILD" instead.
			And we set BUILD_NUMBER_NUMERIC to 0, because some parts of the build (=>launch4j) requiere the build number to allways be a number.
			-->
			<id>build-number-env-missing</id>
			<activation>
				<property>
					<name>!env.BUILD_NUMBER</name>
				</property>
			</activation>
			<properties>
				<BUILD_NUMBER_NUMERIC>0</BUILD_NUMBER_NUMERIC>
				<env.BUILD_NUMBER>LOCAL-BUILD</env.BUILD_NUMBER>
			</properties>
		</profile>
		<profile>
			<!-- 
			If the environment variable BUILD_NUMBER is set, we assume that it is numeric, and we set BUILD_NUMBER_NUMERIC to that value
			-->
			<id>build-number-env-provided</id>
			<activation>
				<property>
					<name>env.BUILD_NUMBER</name>
				</property>
			</activation>
			<properties>
				<BUILD_NUMBER_NUMERIC>${env.BUILD_NUMBER}</BUILD_NUMBER_NUMERIC>
			</properties>
		</profile>

	</profiles>
</project>

# --------------------------------------------------------------------------------
# HTTP server (tomcat)
# --------------------------------------------------------------------------------
server.port=8080

# --------------------------------------------------------------------------------
# Datasource
# --------------------------------------------------------------------------------
#spring.datasource.url=jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE
#spring.datasource.username=sa
#spring.datasource.password=

spring.datasource.url=jdbc:postgresql://localhost/mfprocurement
spring.datasource.username=mfprocurement
spring.datasource.password=mfprocurement

spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true

# --------------------------------------------------------------------------------
# Vaadin
# --------------------------------------------------------------------------------
# see https://github.com/vaadin/spring/blob/master/vaadin-spring-boot/src/main/java/com/vaadin/spring/boot/internal/VaadinServletConfigurationProperties.java
vaadin.servlet.productionMode=false

# --------------------------------------------------------------------------------
# JMS
# --------------------------------------------------------------------------------

# The url of the broker to which this application connects in order to sync with metasfresh
mfprocurement.jms.broker-url=tcp://localhost:61616

#
# the JMS queues to use when communicating with metasfresh  
# IMPORTANT: if you change them here, make sure that the change is synced with metasfresh!
# In metasfresh, those queue names are stored in AD_SysConfig records named 
#   de.metas.procurement.webui.jms.queue.request and
#   de.metas.procurement.webui.jms.queue.response

# our agentSync *server* endpoint consumes from this queue, while on the metasfresh side, 
# the agentSync *client* endpoint produces to this queue
mfprocurement.jms.webui.request=de.metas.jax.rs.procurement.webui.request
# our agentSync *server* endpoint produces to this queue, while on the metasfresh side, 
# the agentSync *client* endpoint consumes from this queue (with a selector!), after having send a two-way-request via the request-queue.
mfprocurement.jms.webui.response=de.metas.jax.rs.procurement.webui.response

# this pair of queue is analog, just with serverSync
mfprocurement.jms.metasfresh.request=de.metas.jax.rs.metasfresh.request
mfprocurement.jms.metasfresh.response=de.metas.jax.rs.metasfresh.response


# The following properties are evaluated in the class ActiveMQBrokerConfiguration

# If runEmbeddedBroker is set to true (ignoring case) 
# then the application starts an embedded JMS broker, running at the URLtaken from ${mfprocurement.jms.broker-url}.
mfprocurement.activemq.runEmbeddedBroker=true

# The embedded broker's name, if one is started. 
# Note that each broker in a network of brokers needs to have a unique name 
mfprocurement.activemq.embeddedBroker-name=procurement.webui


# optional: 
# If an embedded broker is run,
# and this URI is specified, then the embedded JMS broker attempts to connect the local broker to the broker running at the given URI
# see the SSL related properties below if you want to connect via SSL
mfprocurement.activemq.broker.networkConnector.discoveryAddress=static:(tcp://broker-hostname:61616)
#mfprocurement.activemq.broker.networkConnector.discoveryAddress=static:(ssl://ssl-broker-hostname:61617)

# optional:
# If spring.activemq.broker.networkConnector.discoveryAddress is set, 
# then this optional userName and password can be used to autenticate against the remote JMS broker 
mfprocurement.activemq.broker.networkConnector.userName=your-userName
mfprocurement.activemq.broker.networkConnector.password=your-password

# optional:
# If runEmbeddedBroker and useSSL are true, 
# then an SslContext with keystore and truststore is created and added to the embedded broker.
# That way the broker can make a SSL connection
# Note: this is not about SSL between jms-client and jms-broker, but just between brokers
# Also note about the keyStore and trustStore properties, that you can use URLs as defined here: 
#    http://www.mkyong.com/spring/spring-resource-loader-with-getresource-example/
# examples: 
#    url:http://www.yourdomain.com/testing.txt
#    file:c:\\testing.txt
mfprocurement.activemq.broker.useSSL=false
mfprocurement.activemq.broker.networkConnector.keyStore=classpath:procurement_webui.jks
mfprocurement.activemq.broker.networkConnector.keyStorePassword=your-keystore-password
mfprocurement.activemq.broker.networkConnector.trustStore=classpath:truststore.jks
mfprocurement.activemq.broker.networkConnector.trustStorePassword=your-truststore-password

# --------------------------------------------------------------------------------
# Email
# --------------------------------------------------------------------------------
spring.mail.host=localhost
spring.mail.port= 25

mfprocurement.mail.from=recovery@metasfresh.com


# --------------------------------------------------------------------------------
# Server sync
# --------------------------------------------------------------------------------
# JMS broker to which our local  sync endpoint shall connect. If we have an embedded JMS broker running, it generally makes sense to connect to it
mfprocurement.sync.broker-url=${mfprocurement.jms.broker-url}

#mfprocurement.sync.mocked=true

# The sync-URL that we pass to the JAXRSClientFactory in order to create our synchronization endpoint. 
# Note that it contains the ${mfprocurement.sync.broker-url} property 
# and that it might also contain a username and password, in case we connect to a remote JMS broker which requires credentials.
# FRESH-222 et al: trying to solve the problem by making sure messages are preserved by adding '&subscriptionDurable=true'
mfprocurement.sync.url=jms:jndi:dynamicQueues/${mfprocurement.jms.metasfresh.request}?jndiInitialContextFactory=org.apache.activemq.jndi.ActiveMQInitialContextFactory&replyToName=dynamicQueues/${mfprocurement.jms.metasfresh.response}&jndiURL=${mfprocurement.sync.broker-url}&connectionFactoryName=jmsConnectionFactory&subscriptionDurable=true 
#mfprocurement.sync.url=jms:jndi:dynamicQueues/${mfprocurement.jms.metasfresh.request}?jndiInitialContextFactory=org.apache.activemq.jndi.ActiveMQInitialContextFactory&replyToName=dynamicQueues/${mfprocurement.jms.metasfresh.response}&jndiURL=${mfprocurement.sync.broker-url}&connectionFactoryName=jmsConnectionFactory&subscriptionDurable=true&username=smx&password=smx


# the media type that is both send to an endpoint and expected in the repsonse
# default is application/json
#mfprocurement.sync.mediaType=application/json

# --------------------------------------------------------------------------------
# Logging
# --------------------------------------------------------------------------------
# Location of the log file. For instance `/var/log`
logging.path=./log/
# Location of the logging configuration file. For instance `classpath:logback.xml` for Logback
logging.config=classpath:logback-spring.xml

# - Debug transactions
#logging.level.org.springframework.transaction=TRACE
#logging.level.org.springframework.orm.jpa=DEBUG
#logging.level.org.springframework.jdbc=TRACE

# - CXF
# We use the cxf LoggingFeature
# See https://cxf.apache.org/docs/message-logging.html
# By default, things are logged using LoggingInInterceptor with level INFO. So, to switch it off, e.g. raise the log level to WARN
# IMPORTANT: the way we usually configure things, these settings might get overwritten by an external logback.xml file
logging.level.org.apache.cxf.interceptor.LoggingInInterceptor=INFO
logging.level.org.apache.cxf.interceptor.LoggingOutInterceptor=INFO

# All application loggers
logging.level.de.metas.procurement.webui=DEBUG
#
# - Others
# ....


# --------------------------------------------------------------------------------
# Logo
# --------------------------------------------------------------------------------
# Path to logo file (optional)
#mfprocurement.logo.file=

# PoweredBy Logo URL (optional). If not specified, the default powered-by logo will be used (FRESH-79)
#mfprocurement.poweredby.url=

# PoweredBy Logo link URL (optional). If specified, the image will be clickable and will open a new browser window pointing to this url.
mfprocurement.poweredby.link.url=http://metasfresh.com/?utm_content=procurementLogin&utm_medium=app&utm_source=insert_webui_hostname_here&utm_campaign=procurement



# --------------------------------------------------------------------------------
# Login screen
# --------------------------------------------------------------------------------
# Enable remember me feature (default: true) - FRESH-197
#mfprocurement.login.rememberMe.enabled=true
# Remember me cookie max age in days (default: 365=1year) - FRESH-197 
#mfprocurement.login.rememberMe.cookieMaxAgeDays=365


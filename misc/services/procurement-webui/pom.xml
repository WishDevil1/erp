<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>



	<properties>
		<start-class>de.metas.procurement.webui.Application</start-class>

		<version.vaadin>7.6.1</version.vaadin>
		<vaadin.plugin.version>${version.vaadin}</vaadin.plugin.version>

		<touchkit.version>4.1.0.rc1</touchkit.version>

		<vaadin4spring.version>0.0.7.RELEASE</vaadin4spring.version>

		<vaadin-spring.version>1.0.0.beta3</vaadin-spring.version>

		<spring-boot.version>1.4.1.RELEASE</spring-boot.version>

		<!-- note that we also use 3.1.6 in the metasfresh/de.metas.jaxrs module. -->
		<cxf.version>3.1.6</cxf.version>

		<!-- See http://www.mojohaus.org/versions-maven-plugin/examples/update-properties.html
		and http://stackoverflow.com/questions/3628471/maven-versions-plugin-not-picking-up-properties-from-parent
		-->
		<metasfresh.version>[1,10.0.0]</metasfresh.version>

	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- Import dependency management from Spring Boot -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- Pull in the cxf-parents as import scope to re-use the dependenecyManagement
				sections of those poms. Those sections define the versions of various third
				party deps that CXF used to build with and test with and we would like to
				make sure the same versions are used for the samples -->
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-parent</artifactId>
				<version>${cxf.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf</artifactId>
				<version>${cxf.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>




		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>



		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jms</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-kahadb-store</artifactId>
		</dependency>

		<!-- REST -->
		<!-- even without using the http transport we do need the servlet API! -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-transports-jms</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<!-- needed, even if we currently communicate with JMS only -->
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-transports-http</artifactId>
			<version>${cxf.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-client</artifactId>
			<version>${cxf.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-extension-providers</artifactId>
			<version>${cxf.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-management</artifactId>
			<version>${cxf.version}</version>
		</dependency>

		<!-- this provider can also marshal and unmarshal objects that are not
			tagged with @XmlRoot -->
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<exclusions>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-databind</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

	</dependencies>

	<build>
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<configuration>
					<rules>
						<!-- task 08834: We shall not leave the decision about plugin-versions
							to maven. Rationale: we had the case that a build stopped working at a *very*
							critical moment, because maven picked a more recent version of the jaxb plugin.
							That version didn't support the way, we configured it and failed with an
							error message. This shall not happen again. -->
						<requirePluginVersions>
							<message>!! We need to have the plugin version under control to
								avoid build failures due to maven releasing a new plugin version
								!!</message>
							<banLatest>true</banLatest>
							<banRelease>true</banRelease>
							<banSnapshots>true</banSnapshots>
							<phases>clean,deploy,site</phases>
							<additionalPlugins>
								<additionalPlugin>org.apache.maven.plugins:maven-reactor-plugin</additionalPlugin>
							</additionalPlugins>
							<unCheckedPluginList>org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-eclipse-plugin</unCheckedPluginList>
						</requirePluginVersions>

						<!-- See http://maven.apache.org/enforcer/enforcer-rules/dependencyConvergence.html -->
						<dependencyConvergence />

						<!-- if you want to avoid duplicate class names in your dependency tree, then good luck with vaadin ;-)  -->
						<banDuplicateClasses>
							<ignoreClasses>
								<ignoreClass>com.google.*</ignoreClass>
								<ignoreClass>com.vaadin.*</ignoreClass>
								<ignoreClass>elemental.*</ignoreClass>
								<ignoreClass>javax.annotation.*</ignoreClass>
								<ignoreClass>javax.el.*</ignoreClass>
								<ignoreClass>javax.persistence.*</ignoreClass>
								<ignoreClass>javax.servlet.*</ignoreClass>
								<ignoreClass>javax.transaction.*</ignoreClass>
								<ignoreClass>org.apache.commons.*</ignoreClass>
								<ignoreClass>org.apache.juli.*</ignoreClass>
								<ignoreClass>org.mozilla.*</ignoreClass>
							</ignoreClasses>
							<findAllDuplicates>true</findAllDuplicates>
						</banDuplicateClasses>
					</rules>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version>
				<executions>
					<execution>
						<id>spring-boot-procurement-webui-repackage</id>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<executable>true</executable>
						</configuration>
					</execution>
					<execution>
						<id>spring-boot-procurement-webui-build-info</id>
						<goals>
							<goal>build-info</goal> <!-- create build-info.properties; thanks to https://docs.spring.io/spring-boot/docs/current/reference/html/howto-build.html#howto-build-info -->
						</goals>
						<configuration>
								<additionalProperties>
									<jenkinsBuildNo>${env.BUILD_NUMBER}</jenkinsBuildNo>
									<jenkinsBuildTag>${env.BUILD_TAG}</jenkinsBuildTag>
									<jenkinsBuildUrl>${env.BUILD_URL}</jenkinsBuildUrl>
									<jenkinsJobName>${env.JOB_NAME}</jenkinsJobName>
								</additionalProperties>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>

name: test
on:
  workflow_run:
    workflows: [cicd]
    types:
      - completed

jobs:

  init:   
    runs-on: ubuntu-latest
    outputs:
      tag-floating: ${{ steps.sanitize.outputs.refname }}
      tag-fixed: ${{ steps.sanitize.outputs.refname }}-${{ github.event.workflow_run.run_number }}.${{ github.event.workflow_run.run_attempt }}
    env:
      MF_REF_NAME: ${{ github.event.workflow_run.head_branch }}
    steps:
      - name: print-vars
        run: env
      - name: print-github-context
        run: echo '${{ toJSON(github) }}'
      - name: sanitize-ref-name
        id: sanitize
        run: 'echo "::set-output name=refname::$(echo $MF_REF_NAME | sed -r ''s/([^a-zA-Z0-9.]+)/-/g'' | sed -r ''s/(^-|-$)//g'')"'
      - name: print-sanitizef-ref-name
        run: echo ${{ steps.sanitize.outputs.refname }}

  cucumber:
    runs-on: ubuntu-latest
    needs: [init]
    environment: 'test'
    continue-on-error: true
    steps:
      - name: run-cucumber-tests
        env:
          mysecret: ${{ secrets.TESTMO_TOKEN }}
          refname: ${{ needs.init.outputs.tag-fixed }}
        timeout-minutes: 60
        run: |
          echo "$mysecret" > mysecret
          docker cp "$(docker create --name tempcopytainer mazorn/metas-cucumber:$refname):/compose.yml" . && docker rm tempcopytainer
          docker-compose up --abort-on-container-exit --exit-code-from cucumber
          docker-compose down

  cypress:
    if: ${{ false }}  # disable for now
    runs-on: ubuntu-latest
    needs: [init]
    environment: 'test'
    continue-on-error: true
    steps:
      - name: run-cypress-tests
        env:
          mysecret: ${{ secrets.TESTMO_TOKEN }}
          refname: ${{ needs.init.outputs.tag-fixed }}
        timeout-minutes: 240
        run: |
          echo "$mysecret" > mysecret
          docker cp "$(docker create --name tempcopytainer mazorn/metas-e2e:$refname):/compose.yml" . && docker rm tempcopytainer
          docker-compose up --abort-on-container-exit --exit-code-from cucumber
          docker-compose down

